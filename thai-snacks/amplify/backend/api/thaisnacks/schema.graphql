# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
#input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Market
  @model
  @searchable
  @auth(rules: [
    { allow: owner, identityClaim: "sub" },
#    { allow: owner },
    { allow: public, operations: [read] }
  ])
  {
  id: ID!
  name: String!
  products: [Product] @hasMany(indexName: "MarketProducts", fields: ["id"])
  tags: [String]
  owner: String!
}

type Product
  @model
  @auth(rules: [
    { allow: owner, identityClaim: "sub" },
#    { allow: owner },
    { allow: public, operations: [read] }
  ])
  {
  id: ID!
  marketId: ID! @index(name: "MarketProducts", sortKeyFields: ["createdAt"])
  description: String!
  market: Market @belongsTo(fields: ["marketId"])
  file: S3Object!
  price: Float!
  shipped: Boolean!
  owner: String
  createdAt: String
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type User
  @model(
    queries: { get: "getUser", list: null },
    mutations: { create: "registerUser", update: "updateUser", delete: null },
    subscriptions: null
  )
  @auth(rules: [
    { allow: owner, identityClaim: "sub" }
#    { allow: owner }
  ]) {
  id: ID!
  username: String!
  email: String!
  registered: Boolean
  orders: [Order] @hasMany(indexName: "UserOrders", fields: ["id"])
}

type Order
  @model(
    queries: null,
    mutations: { create: "createOrder", update: null, delete: null },
    subscriptions: null
  )
  @auth(rules: [
    { allow: owner, identityClaim: "sub" }
#    { allow: owner }
  ]) {
  id: ID!
  userId: ID! @index(name: "UserOrders", sortKeyFields: ["createdAt"])
  products: [Product] @hasMany # one-directional relation
  user: User @belongsTo(fields: ["userId"])
  shippingAddress: ShippingAddress
  createdAt: String
}

type ShippingAddress {
  city: String!
  country: String!
  address_line1: String!
  address_line2: String
  address_state: String!
  address_zip: String!
}
